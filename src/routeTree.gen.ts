/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthImport } from "./routes/auth";
import { Route as ProtectedImport } from "./routes/_protected";
import { Route as ProtectedIndexImport } from "./routes/_protected/index";
import { Route as AuthLoginImport } from "./routes/auth/login";
import { Route as ProtectedTransactionsImport } from "./routes/_protected/transactions";
import { Route as ProtectedReportsImport } from "./routes/_protected/reports";
import { Route as ProtectedCategoriesImport } from "./routes/_protected/categories";
import { Route as ProtectedCalendarImport } from "./routes/_protected/calendar";
import { Route as ProtectedAccountsImport } from "./routes/_protected/accounts";

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRoute,
} as any);

const ProtectedRoute = ProtectedImport.update({
  id: "/_protected",
  getParentRoute: () => rootRoute,
} as any);

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProtectedRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any);

const ProtectedTransactionsRoute = ProtectedTransactionsImport.update({
  id: "/transactions",
  path: "/transactions",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedReportsRoute = ProtectedReportsImport.update({
  id: "/reports",
  path: "/reports",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedCategoriesRoute = ProtectedCategoriesImport.update({
  id: "/categories",
  path: "/categories",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedCalendarRoute = ProtectedCalendarImport.update({
  id: "/calendar",
  path: "/calendar",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedAccountsRoute = ProtectedAccountsImport.update({
  id: "/accounts",
  path: "/accounts",
  getParentRoute: () => ProtectedRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_protected": {
      id: "/_protected";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof ProtectedImport;
      parentRoute: typeof rootRoute;
    };
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/_protected/accounts": {
      id: "/_protected/accounts";
      path: "/accounts";
      fullPath: "/accounts";
      preLoaderRoute: typeof ProtectedAccountsImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/calendar": {
      id: "/_protected/calendar";
      path: "/calendar";
      fullPath: "/calendar";
      preLoaderRoute: typeof ProtectedCalendarImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/categories": {
      id: "/_protected/categories";
      path: "/categories";
      fullPath: "/categories";
      preLoaderRoute: typeof ProtectedCategoriesImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/reports": {
      id: "/_protected/reports";
      path: "/reports";
      fullPath: "/reports";
      preLoaderRoute: typeof ProtectedReportsImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/transactions": {
      id: "/_protected/transactions";
      path: "/transactions";
      fullPath: "/transactions";
      preLoaderRoute: typeof ProtectedTransactionsImport;
      parentRoute: typeof ProtectedImport;
    };
    "/auth/login": {
      id: "/auth/login";
      path: "/login";
      fullPath: "/auth/login";
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof AuthImport;
    };
    "/_protected/": {
      id: "/_protected/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof ProtectedIndexImport;
      parentRoute: typeof ProtectedImport;
    };
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedAccountsRoute: typeof ProtectedAccountsRoute;
  ProtectedCalendarRoute: typeof ProtectedCalendarRoute;
  ProtectedCategoriesRoute: typeof ProtectedCategoriesRoute;
  ProtectedReportsRoute: typeof ProtectedReportsRoute;
  ProtectedTransactionsRoute: typeof ProtectedTransactionsRoute;
  ProtectedIndexRoute: typeof ProtectedIndexRoute;
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAccountsRoute: ProtectedAccountsRoute,
  ProtectedCalendarRoute: ProtectedCalendarRoute,
  ProtectedCategoriesRoute: ProtectedCategoriesRoute,
  ProtectedReportsRoute: ProtectedReportsRoute,
  ProtectedTransactionsRoute: ProtectedTransactionsRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
};

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
);

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof ProtectedRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/accounts": typeof ProtectedAccountsRoute;
  "/calendar": typeof ProtectedCalendarRoute;
  "/categories": typeof ProtectedCategoriesRoute;
  "/reports": typeof ProtectedReportsRoute;
  "/transactions": typeof ProtectedTransactionsRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/": typeof ProtectedIndexRoute;
}

export interface FileRoutesByTo {
  "/auth": typeof AuthRouteWithChildren;
  "/accounts": typeof ProtectedAccountsRoute;
  "/calendar": typeof ProtectedCalendarRoute;
  "/categories": typeof ProtectedCategoriesRoute;
  "/reports": typeof ProtectedReportsRoute;
  "/transactions": typeof ProtectedTransactionsRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/": typeof ProtectedIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_protected": typeof ProtectedRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/_protected/accounts": typeof ProtectedAccountsRoute;
  "/_protected/calendar": typeof ProtectedCalendarRoute;
  "/_protected/categories": typeof ProtectedCategoriesRoute;
  "/_protected/reports": typeof ProtectedReportsRoute;
  "/_protected/transactions": typeof ProtectedTransactionsRoute;
  "/auth/login": typeof AuthLoginRoute;
  "/_protected/": typeof ProtectedIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/auth"
    | "/accounts"
    | "/calendar"
    | "/categories"
    | "/reports"
    | "/transactions"
    | "/auth/login"
    | "/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/auth"
    | "/accounts"
    | "/calendar"
    | "/categories"
    | "/reports"
    | "/transactions"
    | "/auth/login"
    | "/";
  id:
    | "__root__"
    | "/_protected"
    | "/auth"
    | "/_protected/accounts"
    | "/_protected/calendar"
    | "/_protected/categories"
    | "/_protected/reports"
    | "/_protected/transactions"
    | "/auth/login"
    | "/_protected/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren;
  AuthRoute: typeof AuthRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/auth"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/accounts",
        "/_protected/calendar",
        "/_protected/categories",
        "/_protected/reports",
        "/_protected/transactions",
        "/_protected/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login"
      ]
    },
    "/_protected/accounts": {
      "filePath": "_protected/accounts.tsx",
      "parent": "/_protected"
    },
    "/_protected/calendar": {
      "filePath": "_protected/calendar.tsx",
      "parent": "/_protected"
    },
    "/_protected/categories": {
      "filePath": "_protected/categories.tsx",
      "parent": "/_protected"
    },
    "/_protected/reports": {
      "filePath": "_protected/reports.tsx",
      "parent": "/_protected"
    },
    "/_protected/transactions": {
      "filePath": "_protected/transactions.tsx",
      "parent": "/_protected"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
